.TH LNS
.SH NAME
lns - the lns interpreter
.SH SYNOPSIS
.B lns
[\fIOPTIONS\fR] [\fISOURCE\fR]
.SH DESCRIPTION
.B lns
is a simple and interactive scripting language implemented in C++. For information over the language visit the Wiki section at its repository on \fIGitHub\fR at \fIlorenzonotaro/lns\fR.
.SH OPTIONS
.TP
.BR \-s ", " \-\-silent\-execution
if a runtime error occurs during execution, silently terminate the program without reporting to stdout.
.TP
.BR \-S ", " \-\-silent\-full
if any error \-\-either parse or runtime\-\- occurs, silently terminate the program without reporting to stdout.
.TP
.BR \-\-permissive
enable auto-correction of several errors that would normally cause the program to terminate.
.TP
.BR \-t ", " \-\-time\-info
at the end of execution, show information about the time elapsed after parsing and execution.
.TP
.BR \-o ", " \-\-parse\-only
terminate the program after parsing the code.
.TP
.BR \-f ", " \-\-no\-format
don't use special ANSI escape codes in error messages (for shells that don't support ANSI).
.TP
.BR \-d ", " \-\-debugger
start the program in debugger mode. See the \fBDebugger\fR section for info.
.SH DEBUGGER
The debugger mode allows the user to set breakpoints in the execution. When a break point gets hit, the program enters break mode and the debugger console starts up, which allows the user to check the program status, which includes watching variables and checking the call stack. To start the debugger, use the \fI-d\fR command line option.
.TP
\fBNote\fR: the debugger ignores every other command line option except \fI-p\fR (permissive execution).
.TP
The debugger commands are the following:
.TP
.TP
.BR load "|" l " "\fIfile\fR ":"
load and parse a script file.
.TP
.BR run "|" r ":"
If a file has been loaded, run the script with the current breakpoint settings.
.TP
.BR breakpoint "|" b " " set " "\fIfile\fR " "\fIline\fR ":"
add a breakpoint at a specified location.
.TP
.BR breakpoint "|" b " "  remove " "\fIid\fR ":"
remove the specified breakpoint.
.TP
.BR breakpoint "|" b " "  list ":"
list the registered breakpoints.
.TP
.BR breakpoint "|" b " "  load " "\fIfile\fR ":"
load the breakpoints contained in the specified file (the break points need to be in the format in the format "\fIfilename\fR:\fIline\fR", one per line).
.TP
.BR watch "|" w " "\fIexpression\fR ":"
evaluate the given expression and print the result.
.TP
.BR watch "|" w " "  add " "\fIexpression\fR ":"
add an expression to the watch list.
.TP
.BR watch "|" w " "  remove " "\fIid\fR ":"
remove the specified watch from the watch list.
.TP
.BR watch "|" b " "  all ":"
evaluate all the expressions in the watch list and show their value.
.TP
.BR step "|" s " (" in "|" out "|" over "):"
step onto the next statement to be executed (descending into a function call if necessary), out of the current scope or onto the next statement in the current scope.
.TP
.BR continue "|" c ":"
resume the execution.
.TP
.BR exit "|" e ":"
exit the debugger.
.SH RETURN VALUES
The program may return the following values:
.TP
.BR 0
Execution terminated successfully.
.TP
.BR 1
A fatal error has occurred (e.g. missing source file, unknown option).
.TP
.BR 2
A parse error has occurred.
.TP
.BR 3
A runtime error has occurred.
.TP
.BR 4
Termination due to an unhandled exception.

.TP
\fBNote:\fR if the function exitc() is called from inside the code with a return value, that value has precedence over this convention.